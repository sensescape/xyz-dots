# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key


scene:
    background:
        color: [1.000,1.000,1.000]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 16
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 15

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: earth-dots
                order: global.feature_order
                color: [0.000,0.498,0.831]

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                style: water-dots
                order: global.feature_order
                color: [1.000,1.000,1.000]

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [1],  area: { min: 10000000000 } }
                    - { $zoom: [2],  area: { min: 7000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: [3],  area: { min: 5000000000 } }
                    - { $zoom: [4],  area: { min: 300000000 } }
                    - { $zoom: [5],  area: { min: 50000000 } }
                    - { $zoom: [6],  area: { min: 50000000 } }
                    - { $zoom: [7],  area: { min: 50000000 } }
                    - { $zoom: [8],  area: { min: 50000000 } }
                    - { $zoom: [9],  area: { min: 15000000 } }
                    - { $zoom: [10], area: { min: 4000000 } }
                    - { $zoom: [11], area: { min: 1000000 } }
                    - { $zoom: [12], area: { min: 250000 } }
                    - { $zoom: [13], area: { min: 150000 } }
                    - { $zoom: [14], area: { min: 40000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    color: [1.000,1.000,1.000]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: [1.000,1.000,1.000]

    roads:
        data: { source: mapzen, layer: roads }
        draw:
            lines:
                #color: black
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 352

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    # cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [1.000,1.000,1.000]
                    width: 1px
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 1px
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 1px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        color: [0.850,0.850,0.850]
                        width: 1px

        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[5, 2px], [12, 4px]]
                    # outline:
                    #     color: [0.900,0.900,0.900]
                    #     width: [[5, 0.5px], [8, 0.5px], [12, 1px]]

            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[5, 1px], [12, 2px]]
                        cap: butt
                        # outline:
                        #     color: [0.900,0.900,0.900]
                        #     width: [[5, 0.5px], [12, 1px]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            # outline:
                            #     color: [0.900,0.900,0.900]

            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        # outline:
                        #     color: [0.900,0.900,0.900]

            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt

        # major_road:
        #     filter: { kind: major_road }
        #     # default style
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             width: [[13, 0px], [14, 2px], [16, 2.5px], [19, 8m]]
        #             outline:
        #                 color: [0.700,0.700,0.700]
        #                 width: 1px
        #     trunk_primary:
        #         filter: { kind_detail: [trunk, primary] }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[8, 0.6px], [9, 0.75px], [10, 1.5px], [13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 14m]]
        #                 outline:
        #                     width: 1px
        #         early:
        #             filter: { $zoom: { max: 16 } }
        #             draw:
        #                 lines:
        #                     order: 379
        #                     outline:
        #                         order: function() { return feature.sort_rank + 2; }
        #             primary:
        #                 filter: { kind: [primary] }
        #                 draw:
        #                     lines:
        #                         outline:
        #                             order: function() { return feature.sort_rank + 1; }
        #         routes:
        #             filter: { ref: true }
        #             draw:
        #                 lines:
        #                     color: [1.000,1.000,1.000]
        #                     width: [[8, 1.0px], [9, 1.5px], [10, 2.0px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
        #                     outline:
        #                         color: [0.700,0.700,0.700]
        #                         width: 1px
        #             early:
        #                 filter: { $zoom: { max: 16 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 2; }
        #                         outline:
        #                             order: 353
        #             national-routes:
        #                 filter: { network: ["US:US", "US:I"] }
        #                 draw:
        #                     lines:
        #                         color: [1.000,1.000,1.000]
        #                         width: 1px
        #             tunnel:
        #                 filter: {is_tunnel: true, $zoom: {min: 13} }
        #                 draw:
        #                     lines:
        #                         color: [1.000,1.000,1.000]
        #                         outline:
        #                             color: [0.700,0.700,0.700]
        #
        #     link:
        #         filter: { is_link: true } # on- and off-ramps, etc
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[10, 1px], [14, 3px], [16, 4.5px], [18, 10m]]
        #                 outline:
        #                     color: [0.700,0.700,0.700]
        #                     width: 1px
        #     tunnel:
        #         filter: {is_tunnel: true, $zoom: {min: 13} }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 outline:
        #                     color: [0.700,0.700,0.700]
        #     secondary:
        #         filter: { kind_detail: secondary }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[11, 1.0px], [12, 1.0px], [13, 2.0px], [14, 3.5px], [15, 4.5px], [16, 7.0px], [19, 16m]]
        #                 outline:
        #                     width: 1px
        #         routes:
        #             filter: { ref: true, $zoom: { min: 12 } }
        #             draw:
        #                 lines:
        #                     color: [1.000,1.000,1.000]
        #             tunnel:
        #                 filter: {is_tunnel: true, $zoom: {min: 13} }
        #                 draw:
        #                     lines:
        #                         color: [1.000,1.000,1.000]
        #                         outline:
        #                             color: [0.700,0.700,0.700]
        #
        #     tertiary:
        #         filter: { kind_detail: [tertiary, tertiary_link] }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[11, 0.5px], [12, .75px], [14, 2.5px], [15, 4.0px], [16, 6.5px], [17, 7.5px], [19, 14m]]
        #                 outline:
        #                     width: 1px
        #         early:
        #             filter: { $zoom: { max: 15 } }
        #             draw:
        #                 lines:
        #                     order: 352
        #                     outline:
        #                         order: function() { return feature.sort_rank + 3; }
        #         routes:
        #             filter: { ref: true, $zoom: { min: 12 } }
        #             draw:
        #                 lines:
        #                     color:[1.000,1.000,1.000]
        #             early:
        #                 filter: { $zoom: { max: 15 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 3; }
        #                         outline:
        #                             order: 353
        #             tunnel:
        #                 filter: { is_tunnel: true, $zoom: { min: 13 } }
        #                 draw:
        #                     lines:
        #                         color: [1.000,1.000,1.000]
        #                         outline:
        #                             color: [0.700,0.700,0.700]
        #         link:
        #             filter: { is_link: true } # on- and off-ramps, etc
        #             draw:
        #                 lines:
        #                     color: [1.000,1.000,1.000]
        #                     width: [[11, 0.0px], [12, 0.5px], [14, 1.5px], [16, 2.0px], [19, 7m]]
        #                     outline:
        #                         color: [0.700,0.700,0.700]
        #                         width: 1px
        #
        # minor_road:
        #     filter: { kind: minor_road, not: { kind_detail: service } }
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             width: [[11, 0.5px], [12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.5px], [16, 8m]]
        #             outline:
        #                 width: 1px
        #                 color: [0.700,0.700,0.700]
        #     early:
        #         filter: { $zoom: { max: 16 } }
        #         draw:
        #             lines:
        #                 order: 350
        #                 outline:
        #                     order: 351
        #     # Is this junk code?
        #     round:
        #         filter: { $zoom: { min: 17 } }
        #         draw:
        #             lines:
        #                 cap: round
        #                 join: round
        #
        #     tunnel:
        #         filter: { is_tunnel: true, $zoom: { min: 13 } }
        #         draw:
        #             lines:
        #                 cap: butt
        #                 color: [1.000,1.000,1.000]
        #                 outline:
        #                     color: [0.700,0.700,0.700]
        #     minor_road_bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 cap: round
        #                 outline:
        #                     cap: butt
        #
        # service_road:
        #     filter: { kind: minor_road, kind_detail: service }
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             width: [[13, 0.5px], [17, 3px], [18, 4m]]
        #             outline:
        #                 color: [0.700,0.700,0.700]
        #                 width: 1px
        #
        # path:
        #     filter:
        #         all:
        #             - kind: [path, portage_way]
        #         not:
        #             - kind_detail: [steps, track, pier]
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             width: [[14, 0.5px], [15, 1.5px], [17, 3m]]
        #             outline:
        #                 color: [0.700,0.700,0.700]
        #                 width: 1px
        #     early:
        #         filter:
        #             $zoom: { max: 15 }
        #         draw:
        #             lines:
        #                 order: 351
        #                 outline:
        #                     order: 350
        #
        #     z16-up:
        #         filter:
        #             $zoom: { min: 16 }
        #         draw:
        #             lines:
        #                 cap: round
        #
        #     pedestrian:
        #         filter: { kind_detail: pedestrian }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[14, 0.5px], [15, 1.5px], [17, 3m]]
        #
        #     footway:
        #         filter: { kind_detail: footway }
        #         draw:
        #             lines:
        #                 color: [1.000,1.000,1.000]
        #                 width: [[14, 0.5px], [15, 1.5px], [17, 3m]]
        #
        #     bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 width: [[15, 3.5px], [17, 3m]]
        #                 cap: round
        #                 outline:
        #                     color: [0.700,0.700,0.700]
        #                     width: 1px
        #                     cap: butt
        #
        # track:
        #     filter: { kind: path, kind_detail: track }
        #     draw:
        #         lines:
        #             color: [1.000,1.000,1.000]
        #             width: [[13, 0.5px], [14, 1.0px], [15, 1.0px], [16, 6m]]
        #             cap: butt
        #             join: round
        #             outline:
        #                 color: [0.700,0.700,0.700]
        #                 width: 1px
        #     bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 width: [[15, 3.5], [17, 3m]]
        #                 cap: round
        #                 outline:
        #                     color: [0.700,0.700,0.700]
        #                     width: 1px
        #                     cap: butt

        # steps:
        #     filter:
        #         all:
        #             - kind: path
        #             - kind_detail: steps
        #     draw:
        #         dashed_steps:
        #             order: global.feature_order
        #             color: global.path_steps2
        #             width: [[15, 0.5px], [18, 3px], [19, 1.5m]]
        #             outline:
        #                 style: lines
        #                 color: [[14, global.earth1], [18, global.path_steps1]]
        #                 width: [[14, 0px], [15, 1px], [18, 1.5m]]
        #     in_park:
        #         filter: { landuse_kind: [park, nature_reserve, conservation, golf_course, garden] }
        #         draw:
        #             dashed_steps:
        #                 color: [[14, global.green1_r], [16, global.minor_road3]]
        #                 outline:
        #                     color: global.green1_r
        #     in_university:
        #         filter: { landuse_kind: university }
        #         draw:
        #             dashed_steps:
        #                 color: [[14, global.university_r], [16, global.minor_road3]]
        #                 outline:
        #                     color: global.university_r
        #     in_hospital:
        #         filter: { landuse_kind: hospital }
        #         draw:
        #             dashed_steps:
        #                 color: [[14, global.hospital_r],[16, global.minor_road3]]
        #                 outline:
        #                     color: global.hospital_r


    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: 329
                color: [1.000,1.000,1.000]

        footprints:
            filter:
                any:
                    - { $zoom: [13], scale_rank: [1,2] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], area: { min: 700 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 100 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 }, area: true }
            draw:
                polygons:
                    visible: true
                    style: building-dots

            # extrude:
            #     filter:
            #         all:
            #             - any:
            #                 - { $zoom: [15], height: { min: 250 } }
            #                 - { $zoom: [15], area: { min: 9000 } }
            #                 - { $zoom: [15], volume: { min: 150000 } }
            #                 - { $zoom: [16], height: { min: 100 } }
            #                 - { $zoom: [16], area: { min: 3500 } }
            #                 - { $zoom: [16], volume: { min: 50000 } }
            #                 - { $zoom: [17], area: { min: 500 } }
            #                 - { $zoom: [17], volume: { min: 15000 } }
            #                 - { $zoom: { min: 18 } }
            #             - not:
            #                 - layer: [-1, -2, -3, -4, -5]
            #     draw:
            #         polygons:
            #             visible: extrude
            #             order: 438
            #             color: |
            #                 function () {
            #                     var h = feature.height || 20;
            #                     h = Math.min((h + 75)/ 255, .5); // max brightness: .5
            #                     h = Math.max(h, .1); // min brightness: .1
            #                     return [h, h, h];
            #                 }
            #             extrude: global.building_extrude_height

styles:
    tools-tilecoords:
        shaders:
            blocks:
                global: |
                    // Varying to be added to both vertex and fragment shaders
                    varying vec2 v_pos;
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 TileCoords() {
                        return fract(v_pos);
                    }
                    #endif
                position: |
                    v_pos = modelPosition().xy;
    tools-grid:
        mix: tools-tilecoords
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    bool grid(vec2 st, float res, float press) {
                        vec2 grid = fract(st * res);
                        return (grid.x < res * press) || (grid.y < res * press);
                    }
                    float TileGrid(float res) {
                        vec2 st = TileCoords() * 100. * res;
                        float pct = 0.0;
                        float press = 0.3 + (1.0 - fract(u_map_position.z)) * 0.1;
                        if (grid(st, 0.1, press)) { pct += 0.5; }
                        return pct;
                    }
                    float TileGrid() {
                        return mix(TileGrid(1.), TileGrid(2.), fract(u_map_position.z));
                    }
                    #endif
    tools-grid2:
        mix: tools-tilecoords
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    bool grid(vec2 st, float res, float press) {
                        vec2 grid = fract(st * res);
                        return (grid.x < res * press) || (grid.y < res * press);
                    }
                    float TileGrid(float res) {
                        vec2 st = TileCoords() * 320. * res;
                        float pct = 0.0;
                        float press = 0.6 + (1.0 - fract(u_map_position.z)) * 0.1;
                        if (grid(st, 0.1, press)) { pct += 0.5; }
                        return pct;
                    }
                    float TileGrid() {
                        return mix(TileGrid(1.), TileGrid(2.), fract(u_map_position.z));
                    }
                    #endif

    tools-grid3:
        mix: tools-tilecoords
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    bool grid(vec2 st, float res, float press) {
                        vec2 grid = fract(st * res);
                        return (grid.x < res * press) || (grid.y < res * press);
                    }
                    float TileGrid(float res) {
                        vec2 st = TileCoords() * 480. * res;
                        float pct = 0.0;
                        float press = 0.8 + (1.0 - fract(u_map_position.z)) * 0.1;
                        if (grid(st, 0.1, press)) { pct += 0.5; }
                        return pct;
                    }
                    float TileGrid() {
                        return mix(TileGrid(1.), TileGrid(2.), fract(u_map_position.z));
                    }
                    #endif
    grid-earth:
        base: polygons
        mix: [tools-grid2]
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.000,0.000,0.000), TileGrid());

    grid-buildings:
        base: polygons
        mix: [tools-grid2]
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.700,0.700,0.700), TileGrid());

    grid-water:
        base: polygons
        mix: [tools-grid]
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.400,0.400,0.400), TileGrid());

    grid-green:
        base: polygons
        mix: [tools-grid3]
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.000,0.000,0.000), TileGrid());

    earth-dots:
        base: polygons
        mix: [polygons-dots]
        shaders:
            defines:
                DOTS_SIZE: 0.7
                DOTS_TYPE: fill
                DOTS_TILE_STYLE: tile
                DOTS_SCALE: 18.0
                DOTS_BACKGROUND_COLOR: vec3(1.000,1.000,1.000)
                DOTS_COLOR: vec3(0.880,0.880,0.880)

    water-dots:
        base: polygons
        mix: [polygons-dots]
        shaders:
            defines:
                DOTS_SIZE: 0.7
                DOTS_TYPE: fill
                DOTS_TILE_STYLE: tile
                DOTS_SCALE: 18.0
                DOTS_BACKGROUND_COLOR: vec3(1.000,1.000,1.000)
                DOTS_COLOR: vec3(0.960,0.960,0.960)

    building-dots:
        base: polygons
        mix: [polygons-dots]
        shaders:
            defines:
                DOTS_SIZE: 0.7
                DOTS_TYPE: fill
                DOTS_TILE_STYLE: tile
                DOTS_SCALE: 18.0
                DOTS_BACKGROUND_COLOR: vec3(1.000,1.000,1.000)
                DOTS_COLOR: vec3(0.770,0.770,0.770)

    polygons_transparent:
        base: polygons
        blend: overlay

    polygons-dots:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply dot patterns to a polygon. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)
        ui:
            shaders:
                defines:
                    DOTS_SCALE:
                        type: number
                        label: Scale
                        range:
                            min: 1.
                            max: 1000.
                            step: 1.
                    DOTS_SIZE:
                        type: number
                        label: Size
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    STROKE:
                        type: number
                        label: Stroke
                        default_value: 0.15
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_TYPE:
                        type: dropdownArray
                        label: Type
                        values: ['fill', 'stroke']
                    DOTS_TILE_STYLE:
                        type: dropdownArray
                        label: 'Tile type'
                        values: ['tile', 'brick']
                    DOTS_COLOR:
                        type: color
                        label: Color
                    DOTS_BACKGROUND_COLOR:
                        type: color
                        label: 'Background color'

        base: polygons
        mix: [space-tile, tiling-brick, tiling-tile, shapes-circle]
        shaders:
            defines:
                DOTS_COLOR: color.rgb*.5
                DOTS_BACKGROUND_COLOR: color.rgb
                DOTS_SCALE: 10.
                DOTS_SIZE: 0.41
                DOTS_TYPE: fill
                DOTS_TILE_STYLE: brick
            blocks:
                color: |
                    color.rgb = mix(DOTS_BACKGROUND_COLOR,
                                    DOTS_COLOR,
                                    DOTS_TYPE( DOTS_SIZE, circleDF(vec2(0.5)-DOTS_TILE_STYLE(getTileCoords()*DOTS_SCALE,2.))) );

    shapes-circle:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Collection of functions to draw circles. To learn more about how to make shapes on shaders go to From check [this chapter about shapes from the Book of Shaders](https://thebookofshaders.com/07/)
            examples:
                lego:
                    url: https://tangrams.github.io/tangram-sandbox/styles/lego.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/lego.png
                    lines: 109-110
                patterns:
                    url: https://tangrams.github.io/tangram-sandbox/styles/patterns.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/patterns.png
                    lines: 146
                nursery:
                    url: https://tangrams.github.io/tangram-sandbox/styles/nursery.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/nursery.png
                    lines: 146
        test:
            circleDF: { blocks: { color: "    color.rgb += circleDF(v_texcoord.xy-.5);" } }
            circle: { blocks: { color: "    color.rgb += circle(v_texcoord.xy,.5);" } }
            circleBorder: { blocks: { color: "    color.rgb += circleBorder(v_texcoord.xy,.5);" } }

        mix: [shapes-type]
        shaders:
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st)*3.03;
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return fill(radius, circleDF(st-vec2(0.5)));
                    }

                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circleBorder (vec2 st, float radius) {
                        return stroke(radius, circleDF(st-vec2(0.5)));
                    }

    block:
        shaders:
            defines:
                ADD: '+'
                SUBTRACT: '-'
                MULTIPLY: '*'

                PI: 3.1415926535897932384626433832795
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163

                EPSILON: 0.0000001

                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)

    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the position on the tile
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    tiling-brick:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Repeats a coordinate space (`vec2 st`) in diferent brick-like tiles N times (`float zoom`). For more information about tilling patterns read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)
            examples:
                nursery:
                    url: https://tangrams.github.io/tangram-sandbox/styles/nursery.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/nursery.png
                    lines: 99
                patterns:
                    url: https://tangrams.github.io/tangram-sandbox/styles/patterns.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/patterns.png
                    lines: 130
        test:
            brick: { blocks: { color: "    color.rg += brick(v_texcoord.xy,5.);" } }
        shaders:
            blocks:
                global: |
                    vec2 brick (vec2 st, float zoom) {
                        st *= zoom;
                        // Here is where the offset is happening
                        st.x += step(1., mod(st.y,2.0)) * 0.5;
                        return fract(st);
                    }

    tiling-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Repeats a coordinate space (`vec2 st`) in diferent brick-like tiles N times (`float zoom`). For more information about tilling patterns read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)
        test:
            tile: { blocks: { color: "    color.rg += tile(v_texcoord.xy,5.);" } }
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent tiles
                    // ================================
                    vec2 tile (vec2 st, float zoom) {
                        st *= zoom;
                        return fract(st);
                    }

    shapes-type:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                This block provides to functions `fill` and `stroke`. Each one transform a SDF to a fill shape or a stroke shape (border). The stroke width can be control with the define `STROKE`.
                To learn more about how to make shapes on shaders go to From check [this chapter about shapes from the Book of Shaders](https://thebookofshaders.com/07/)
        mix: [functions-aastep]
        shaders:
            defines:
                STROKE: 0.15
            blocks:
                global: |
                    float fill (in float size, in float x) {
                        return 1.-aastep(size, x);
                    }

                    float stroke (in float size, in float x) {
                        return aastep(size, x+STROKE*.5) - aastep(size, x-STROKE*.5);
                    }

    functions-zoom:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                when you mix this block to another block you can use the functions `zoom()` or `zoomEase()`. Both will help you to interpolate any values between the zooms `ZOOM_START` and `ZOOM_END`.
                By default `zoom()` and `zoomEase()` will return a `float `number between 0 and 1. But you can change it to interpolate any thing! Like `floats`, `vec2`, `vec3`, `vec4` and even other functions! For that you just need to change de `defines`: `ZOOM_IN`, and `ZOOM_OUT` to what ever you want to interpolate.
                `zoom()` use the cuadratic interpolation of `smoothstep()` but you can use `zoomEase()` to specify what type of **easing interpolation** you prefere. Just change the default `linear` function for any [easing functions describe here](#functions-easing) in the `ZOOM_FNC` define. Ex: `ZOOM_FNC: quadraticInOut`
        mix: [functions-easing]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 20.
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_OUT: 1.0
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }
                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    ZOOM_FNC( (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) ) );
                    }
    functions-easing:
        doc:
            author:
                name: StackGL
                url: http://stack.gl/
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Easing functions originally develop by Robert Penner's and transformed to GLSL by [StackGL](http://stack.gl/) in this repo: <https://github.com/stackgl/glsl-easings>
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                global: |
                    float linear (in float t) {
                        return t;
                    }
                    float exponentialIn (in float t) {
                        return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));
                    }
                    float exponentialOut (in float t) {
                        return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);
                    }
                    float exponentialInOut (in float t) {
                        return t == 0.0 || t == 1.0
                        ? t
                        : t < 0.5
                            ? +0.5 * pow(2.0, (20.0 * t) - 10.0)
                            : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;
                    }
                    float sineIn (in float t) {
                        return sin((t - 1.0) * HALF_PI) + 1.0;
                    }
                    float sineOut (in float t) {
                        return sin(t * HALF_PI);
                    }
                    float sineInOut (in float t) {
                        return -0.5 * (cos(PI * t) - 1.0);
                    }
                    float qinticIn (in float t) {
                        return pow(t, 5.0);
                    }
                    float qinticOut (in float t) {
                        return 1.0 - (pow(t - 1.0, 5.0));
                    }
                    float qinticInOut (in float t) {
                        return t < 0.5
                            ? +16.0 * pow(t, 5.0)
                            : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;
                    }
                    float quarticIn (in float t) {
                        return pow(t, 4.0);
                    }
                    float quarticOut (in float t) {
                        return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
                    }
                    float quarticInOut (in float t) {
                        return t < 0.5
                            ? +8.0 * pow(t, 4.0)
                            : -8.0 * pow(t - 1.0, 4.0) + 1.0;
                    }
                    float quadraticInOut (in float t) {
                        float p = 2.0 * t * t;
                        return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
                    }
                    float quadraticIn (in float t) {
                        return t * t;
                    }
                    float quadraticOut (in float t) {
                        return -t * (t - 2.0);
                    }
                    float cubicIn (in float t) {
                        return t * t * t;
                    }
                    float cubicOut (in float t) {
                        float f = t - 1.0;
                        return f * f * f + 1.0;
                    }
                    float cubicInOut (in float t) {
                        return t < 0.5
                            ? 4.0 * t * t * t
                            : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;
                    }
                    float elasticIn (in float t) {
                        return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));
                    }
                    float elasticOut (in float t) {
                        return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;
                    }
                    float elasticInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))
                            : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;
                    }
                    float circularIn (in float t) {
                        return 1.0 - sqrt(1.0 - t * t);
                    }
                    float circularOut (in float t) {
                        return sqrt((2.0 - t) * t);
                    }
                    float circularInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
                            : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
                    }
                    float bounceOut (in float t) {
                        const float a = 4.0 / 11.0;
                        const float b = 8.0 / 11.0;
                        const float c = 9.0 / 10.0;
                        const float ca = 4356.0 / 361.0;
                        const float cb = 35442.0 / 1805.0;
                        const float cc = 16061.0 / 1805.0;
                        float t2 = t * t;
                        return t < a
                        ? 7.5625 * t2
                        : t < b
                            ? 9.075 * t2 - 9.9 * t + 3.4
                            : t < c
                                ? ca * t2 - cb * t + cc
                                : 10.8 * t * t - 20.52 * t + 10.72;
                    }
                    float bounceIn (in float t) {
                        return 1.0 - bounceOut(1.0 - t);
                    }
                    float bounceInOut (in float t) {
                        return t < 0.5
                        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
                        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
                    }
                    float backIn (in float t) {
                        return pow(t, 3.0) - t * sin(t * PI);
                    }
                    float backOut (in float t) {
                        float f = 1.0 - t;
                        return 1.0 - (pow(f, 3.0) - f * sin(f * PI));
                    }
                    float backInOut (in float t) {
                        float f = t < 0.5
                        ? 2.0 * t
                        : 1.0 - (2.0 * t - 1.0);
                        float g = pow(f, 3.0) - f * sin(f * PI);
                        return t < 0.5
                        ? 0.5 * g
                        : 0.5 * (1.0 - g) + 0.5;
                    }

    geometry-normal:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Functions to detect if the surface is a wall (`bool isWall()`) or a roof ('bool isRoof()') based on the normals
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    // Ask to the geometry normals if this surface is a Wall
                    bool isWall () {
                        return dot(vec3(0., 0., 1.), worldNormal()) < 1.0 - TANGRAM_EPSILON;
                    }
                    //
                    // Ask to the geometry normals if this surface is a roof
                    bool isRoof () {
                        return !isWall();
                    }
                    #endif

    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl) in this module <https://github.com/stackgl/glsl-aastep>
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }
